import random
count_id=0
# გვარების სიმრავლე: 100 ჩანაწერი
LNames = ['აბაშიძე', 'გიგაური', 'არჩვაძე', 'ახალაია', 'ბაძაღუა', 'ბერიანიძე', 'ბერიშვილი', 'გვენცაძე', 'დალაქიშვილი',
          'ანთიძე', 'გიორგაძე', 'გოგალაძე', 'გოცირიძე', 'ვარდიძე', 'ზარანდია', 'თადუმაძე', 'ლაბაძე', 'კვარაცხელია',
          'კუსრაძე', 'კვესელავა', 'კაპანაძე', 'კასრაძე', 'კვინიკაძე', 'კოპაძე', 'კანკია', 'კორძაია', 'მიქავა', 'მელია',
          'მონიავა', 'ნიაური', 'ლაცაბიძე', 'მიქაძე', 'ნემსიწვერიძე', 'მაისურაძე', 'მაცაბერიძე', 'მჟავია', 'მაჩალაძე',
          'ოდიშარია', 'მეტრეველი', 'ნეფარიძე', 'მოდებაძე', 'მარჯანიძე', 'მუმლაძე', 'ნასრაშვილი',  'ჯანჯღავა', 'მოსია',
          'ნოზაძე', 'ნუცუბიძე', 'ონიანი', 'ოქრუაშვილი', 'პერტია', 'რაზმაძე', 'რევაზაშვილი', 'საგანელიძე', 'ჯახაია',
          'სალუქვაძე', 'სამსონაშვილი', 'სამხარაძე', 'სარალიძე', 'სართანია', 'სარიშვილი', 'სიმონიშვილი', 'სხილაძე',
          'ხურციძე', 'სიხარულიძე', 'ტაბატაძე', 'ფაცაცია', 'ფილაური', 'ფუხაშვილი', 'ქობალია', 'ყიფშიძე', 'შაინიძე',
          'ფიფია', 'შენგელია', 'შეროზია', 'შველიძე', 'ჩხეიძე', 'ჩადუნელი', 'ჩიკვაშვილი', 'ცქიტიშვილი', 'ჩოკორაია',
          'ცაგურია', 'ცერცვაძე', 'ცუხიშვილი', 'ძინძიბაძე', 'წერეთელი', 'წიკლაური', 'ჭავჭანიძე', 'ჩირაძე', 'ჭელიძე',
          'ჭანტურია', 'სირაძე', 'შონია', 'ხანჯალაძე', 'ხარაზიშვილი', 'ხელაძე', 'ხვინგია', 'ხუციშვილი', 'ჯანელიძე',
          'ჯოხაძე']

# გოგონების სახელების სიმრავლე: 40 ჩანაწერი
GNames = ['ანა', 'ანუკი', 'ბარბარე', 'გვანცა', 'დიანა', 'ეკა', 'ელენე', 'ვერონიკა', 'ვიქტორია', 'თათია', 'ლამზირა',
          'თეა', 'თეკლე', 'თინიკო', 'თამარი', 'იზაბელა', 'ია', 'იამზე', 'ლია', 'ლიკა', 'ლანა', 'მარიკა', 'მანანა',
          'მაია', 'მაკა', 'მარიამი', 'ნანა', 'ნანი', 'ნატა', 'ნატო', 'ნინო', 'ნონა', 'ოლიკო', 'ქეთევანი', 'სალომე',
          'სოფიკო', 'ნია', 'ქრისტინე', 'შორენა', 'ხატია']

# print(len(GNames))
# ბიჭების სახელების სიმრავლე: 40 ჩანაწერი
BNames = ['ალეკო', 'ალიკა', 'ამირან', 'ანდრია', 'არჩილი', 'ასლანი', 'ბაჩუკი', 'ბექა', 'გიგა', 'გიორგი', 'დავითი',
          'გიგი', 'გოგა', 'დათა', 'ერეკლე', 'თემური', 'იაკობ', 'ილია', 'ირაკლი', 'ლადო', 'ლაშა', 'მიხეილ',
          'ნიკა', 'ოთარი', 'პაატა', 'რამაზ', 'რამინი', 'რატი', 'რაული', 'რევაზი', 'რომა', 'რომანი', 'სანდრო',
          'საბა', 'სერგი', 'სიმონ', 'შალვა', 'შოთა', 'ცოტნე', 'ჯაბა']

# print(len(BNames))
# ერთად აღებული გოგონების და ბიჭების სახელების სიმრავლე: 80 ჩანაწერი
FNames = ['ანა', 'ანუკი', 'ბარბარე', 'გვანცა', 'დიანა', 'ეკა', 'ელენე', 'ვერონიკა', 'ვიქტორია', 'თათია', 'ლამზირა',
          'თეა', 'თეკლე', 'თინიკო', 'თამარი', 'იზაბელა', 'ია', 'იამზე', 'ლია', 'ლიკა', 'ლანა', 'მარიკა', 'მანანა',
          'მაია', 'მაკა', 'მარიამი', 'ნანა', 'ნანი', 'ნატა', 'ნატო', 'ნინო', 'ნონა', 'ოლიკო', 'ქეთევანი', 'სალომე',
          'სოფიკო', 'ნია', 'ქრისტინე', 'შორენა', 'ხატია', 'ალეკო', 'ალიკა', 'ამირან', 'ანდრია', 'არჩილი', 'ასლანი',
          'ბაჩუკი', 'ბექა',   'გიგა', 'გიორგი', 'დავითი',
          'გიგი', 'გოგა', 'დათა', 'ერეკლე', 'თემური', 'იაკობ', 'ილია', 'ირაკლი', 'ლადო', 'ლაშა', 'მიხეილ',
          'ნიკა', 'ოთარი', 'პაატა', 'რამაზ', 'რამინი', 'რატი', 'რაული', 'რევაზი', 'რომა', 'რომანი', 'სანდრო',
          'საბა', 'სერგი', 'სიმონ', 'შალვა', 'შოთა', 'ცოტნე', 'ჯაბა']
# საგნების დასახელებების სიმრავლე: 10 ჩანაწერი
Subject = ['პროგრამირების საფუძვლები', 'კალკულუსი II', 'შესავალი ფიზიკაში', 'კომპიუტერული უნარჩვევები',
           'ქიმიის შესავალი', 'ბიოლოგიის შესავალი', 'ალგორითმები I', 'შესავალი ელექტრონიკაში',
           'მონაცემთა სტრუქტურები', 'ალგორითმები II']

""" შენიშვნა. ქვემოთ მოყვანილი კოდი Stud_list სიმრავლეს ავსებს 100000 ჩანაწერით """
Point = [str(i) for i in range(101)]  # შეფასების სიმრავლე


# სტუდენტებზე ჩანაწერების სიმრავლე
ch = random.choice
Stud_recs = [' '.join([ch(LNames), ch(FNames), ch(Subject), ch(Point)]) for _ in range(100000)]

class Student:
    def __init__(self, stud):
        global count_id
        count_id+=1
        self.lname = stud[0]
        self.fname = stud[1]
        self.subj = {' '.join(stud[2:-1]): [int(stud[-1])]}
        self.id=count_id
    def union(self, other):
        if (self.lname, self.fname) == (other.lname, other.fname):

            key = other.subj.keys()
            key = tuple(key)
            key = key[0]
            if key not in self.subj.keys():
                self.subj[key] = other.subj[key]
            else:
                self.subj[key] += other.subj[key]

    def final_score(self):
        for key, value in self.subj.items():
            self.subj[key] = int(round(sum(value) / len(value), 0))
        return self





    def obj_to_dict(self):
        """ მეთოდი წარმოადგენს დანამატს მიმდინარე ამოცანის შესაბამისად.
            მეთოდი იძლევა Student ტიპის ობიექტისგან მისი ატრიბუტების უშუალო მნიშვნელობებისგან შემდგარი dict-ის
            მიღების საშუალებას შემდეგი მიმდევრობით:
            ["გვარი":მნიშნელობა, "სახელი":მნიშნელობა, "საგანი1":მნიშნელობა, ... , "საგანი10":მნიშნელობა,
                "gpa":მნიშნელობა]"""
        # შევქმნათ შესაბამისი dict ობიექტი.
        dct = {'_id': self.id, 'lname': self.lname, 'fname': self.fname}
        # ლექსიკონში შევიტანოთ წყვილი ("საგნის დასახელება" : "მიღებული შეფასება")
        i=1
        for key, value in self.subj.items():
            subject="subject"+str(i)
            Score1="score"+str(i)
            dct[subject] = key
            dct[Score1] = value
            i += 1

        return dct
def all_data():
    Stud_list = [Student(stud.split()) for stud in Stud_recs]

    dct = {}
    for stud in Stud_list:
        key = (stud.lname, stud.fname)
        if key not in dct.keys():
            dct[key] = stud
        else:
            dct[key].union(stud)

    Stud_list = [stud.final_score() for stud in dct.values()]
    return Stud_list